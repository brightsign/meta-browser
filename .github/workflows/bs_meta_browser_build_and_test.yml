name: 'BrightSign Build and Test Meta-Browser: Build and test workflow'
on:
  workflow_call:
    inputs:
      runner_name:
        description: 'Runner name'
        required: true
        type: string

      github_hosted_runner:
        description: 'Whether to use GitHub-hosted runner'
        required: false
        type: boolean
        default: false

      build_type:
        description: 'Build Type'
        required: true
        type: string

      yocto_version:
        description: 'Yocto version'
        required: true
        type: string

      chromium_version:
        description: 'Chromium version (ozone-wayland or x11)'
        required: true
        type: string

      libc_flavour:
        description: 'libc flavour'
        required: true
        type: string

      arch:
        description: 'Architecture'
        required: true
        type: string

      aws_arn_role:
        required: true
        type: string

      aws_region:
        required: true
        type: string

jobs:
  build-and-test-meta-browser:
    name: Build and Test Meta-Browser
    runs-on: ${{ inputs.runner_name }}
    defaults:
      run:
        shell: bash
    steps:
      # Configure AWS credentials for accessing S3 cache buckets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ inputs.aws_region }}
          role-to-assume: ${{ inputs.aws_arn_role }}

      # Download config file and set environment variables
      - name: Download config file and set env vars from it
        run: |
          aws s3 cp s3://meta-browser-ci-config-bucket/config.json .
          aws s3 cp s3://meta-browser-ci-config-bucket/set_github_env_vars.py .
          python3 set_github_env_vars.py --file config.json

      # Install required packages
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y nfs-common git build-essential python3-pip
          
          # Yocto build dependencies (matching Docker container requirements)
          sudo apt-get install -y gawk wget git-core diffstat unzip texinfo gcc-multilib \
            build-essential chrpath socat cpio python3 python3-pip python3-pexpect \
            xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa \
            libsdl1.2-dev pylint xterm python3-subunit mesa-common-dev zstd liblz4-tool \
            file locales sudo
            
          # Additional tools that might be in the Docker container
          sudo apt-get install -y vim nano less curl wget rsync
          
          # Set up locale (as typically done in Docker containers)
          locale --all-locales | grep en_US.utf8 || true
          echo "en_US.UTF-8 UTF-8" | sudo tee -a /etc/locale.gen
          sudo locale-gen
          
          # Install kas (Yocto build tool)
          python3 -m pip install --user kas
          export LANG=en_US.UTF-8
          export LC_ALL=en_US.UTF-8
          
          # Install kas (Yocto build tool) - this is crucial for the build script
          python3 -m pip install --user kas
          
          # Ensure the user has a proper shell environment
          echo 'export LANG=en_US.UTF-8' >> ~/.bashrc
          echo 'export LC_ALL=en_US.UTF-8' >> ~/.bashrc

      # Mount EFS file systems
      - name: Mount EFS file systems
        run: |
          # Create mount points
          sudo mkdir -p /mnt/shared-cache /mnt/git-mirror
          
          # Debug DNS resolution
          echo "=== DNS Troubleshooting ==="
          echo "Checking DNS resolution for EFS endpoints..."
          nslookup ${{ env.SHARED_CACHE_EFS_ID }}.efs.${{ env.AWS_REGION }}.amazonaws.com || echo "DNS lookup failed"
          nslookup ${{ env.GIT_MIRROR_EFS_ID }}.efs.${{ env.AWS_REGION }}.amazonaws.com || echo "DNS lookup failed"
          
          # Check AWS metadata service and VPC DNS
          echo "=== VPC DNS Settings ==="
          curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/ | head -1 | xargs -I {} curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/{}/vpc-id || echo "VPC metadata failed"
          
          # Check if we can reach AWS services
          echo "=== AWS Connectivity Check ==="
          curl -s --connect-timeout 10 https://s3.amazonaws.com && echo "S3 reachable" || echo "S3 not reachable"
          
          # Alternative: Use mount target IP if DNS fails
          echo "=== Alternative EFS Mount Strategy ==="
          # Try to resolve mount target IPs through AWS CLI if available
          if command -v aws &> /dev/null; then
            echo "Attempting to get EFS mount targets..."
            aws efs describe-mount-targets --file-system-id ${{ env.SHARED_CACHE_EFS_ID }} --region ${{ env.AWS_REGION }} || echo "AWS CLI describe failed"
          fi
          
          # Try using regional EFS mount target instead
          echo "=== Mounting EFS file systems ==="
          echo "Shared cache EFS: ${{ env.SHARED_CACHE_EFS_ID }}"
          echo "Git mirror EFS: ${{ env.GIT_MIRROR_EFS_ID }}"
          echo "AWS Region: ${{ env.AWS_REGION }}"
          
          # Get EFS mount target IPs for fallback
          SHARED_CACHE_IP=$(aws efs describe-mount-targets --file-system-id ${{ env.SHARED_CACHE_EFS_ID }} --region ${{ env.AWS_REGION }} --query 'MountTargets[0].IpAddress' --output text 2>/dev/null || echo "")
          GIT_MIRROR_IP=$(aws efs describe-mount-targets --file-system-id ${{ env.GIT_MIRROR_EFS_ID }} --region ${{ env.AWS_REGION }} --query 'MountTargets[0].IpAddress' --output text 2>/dev/null || echo "")
          echo "Shared cache EFS IP: $SHARED_CACHE_IP"
          echo "Git mirror EFS IP: $GIT_MIRROR_IP"
          
          # Mount shared cache EFS (sstate, downloads) with DNS and IP fallback
          SHARED_MOUNTED=false
          for i in {1..2}; do
            echo "Attempt $i: Mounting shared cache EFS..."
            # Try DNS first
            if sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,intr,timeo=600 \
              ${{ env.SHARED_CACHE_EFS_ID }}.efs.${{ env.AWS_REGION }}.amazonaws.com:/ /mnt/shared-cache 2>/dev/null; then
              echo "✓ Shared cache EFS mounted successfully via DNS"
              SHARED_MOUNTED=true
              break
            elif [ -n "$SHARED_CACHE_IP" ]; then
              echo "DNS failed, trying IP address: $SHARED_CACHE_IP"
              if sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,intr,timeo=600 \
                $SHARED_CACHE_IP:/ /mnt/shared-cache; then
                echo "✓ Shared cache EFS mounted successfully via IP"
                SHARED_MOUNTED=true
                break
              fi
            fi
            echo "✗ Mount attempt $i failed, retrying..."
            sleep 5
          done
          
          # Mount git mirror EFS with DNS and IP fallback  
          GIT_MOUNTED=false
          for i in {1..2}; do
            echo "Attempt $i: Mounting git mirror EFS..."
            # Try DNS first
            if sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,intr,timeo=600 \
              ${{ env.GIT_MIRROR_EFS_ID }}.efs.${{ env.AWS_REGION }}.amazonaws.com:/ /mnt/git-mirror 2>/dev/null; then
              echo "✓ Git mirror EFS mounted successfully via DNS"
              GIT_MOUNTED=true
              break
            elif [ -n "$GIT_MIRROR_IP" ]; then
              echo "DNS failed, trying IP address: $GIT_MIRROR_IP"
              if sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,intr,timeo=600 \
                $GIT_MIRROR_IP:/ /mnt/git-mirror; then
                echo "✓ Git mirror EFS mounted successfully via IP"
                GIT_MOUNTED=true
                break
              fi
            fi
            echo "✗ Mount attempt $i failed, retrying..."
            sleep 5
          done
          
          # Report mount results
          if [ "$SHARED_MOUNTED" = "false" ]; then
            echo "⚠️  WARNING: Failed to mount shared cache EFS - builds will be slower without cache"
          fi
          if [ "$GIT_MOUNTED" = "false" ]; then
            echo "⚠️  WARNING: Failed to mount git mirror EFS - will clone repositories directly"
          fi
          
          if [ "$SHARED_MOUNTED" = "true" ] && [ "$GIT_MOUNTED" = "true" ]; then
            echo "🎉 All EFS file systems mounted successfully!"
          fi
          
          # Verify mounts
          echo "=== Mount Verification ==="
          mount | grep mnt || echo "No /mnt filesystems found"
          df -h | grep mnt || echo "No /mnt filesystems in df"
          
          # Create cache directories even if mounts failed (for graceful degradation)
          sudo mkdir -p /mnt/shared-cache/sstate-cache
          sudo mkdir -p /mnt/shared-cache/downloads
          sudo mkdir -p /mnt/git-mirror
          
          # Set permissions
          sudo chown -R ubuntu:ubuntu /mnt/shared-cache /mnt/git-mirror || true

      # Set up build directories with EFS mounts
      - name: Setup build environment
        run: |
          # Set environment variables that might be expected
          export LANG=en_US.UTF-8
          export LC_ALL=en_US.UTF-8
          
          # Create the expected directory structure for the build script
          # The build script expects to run from /yocto/master and create dirs in /yocto
          sudo mkdir -p /yocto/${{ inputs.yocto_version }}
          sudo chown -R ubuntu:ubuntu /yocto
          
          # Also ensure our working directory exists
          mkdir -p /home/ubuntu/yocto/${{ inputs.yocto_version }}
          cd /home/ubuntu/yocto/${{ inputs.yocto_version }}
          
          # Clean any previous builds
          rm -rf meta-browser meta-chromium-test build/tmp/work/*/*/*/pseudo build/tmp/sysroots-components/*/pseudo 2>/dev/null || true
          
          # Create symlinks to EFS mounts
          ln -sf /mnt/shared-cache/sstate-cache ./sstate-cache
          ln -sf /mnt/shared-cache/downloads ./downloads
          
          # Create symlinks in /yocto to allow the build script to work
          ln -sf /mnt/shared-cache/sstate-cache /yocto/yocto_sstate_chromium
          ln -sf /mnt/shared-cache/downloads /yocto/yocto_dl
          
          # Create other directories that the build script expects
          sudo mkdir -p /yocto/yocto_ccache /yocto/test-images
          sudo chown -R ubuntu:ubuntu /yocto/yocto_ccache /yocto/test-images
          
          # Ensure kas is in PATH for the build
          echo "export PATH=\$PATH:\$HOME/.local/bin" >> ~/.bashrc
          
          # Create other directories that the build script expects with proper permissions
          sudo mkdir -p /yocto/yocto_ccache /yocto/test-images
          sudo chmod 755 /yocto/yocto_ccache /yocto/test-images
          sudo chown -R ubuntu:ubuntu /yocto/yocto_ccache /yocto/test-images
          
          # Ensure kas and other tools are in PATH for the build
          echo "export PATH=\$PATH:\$HOME/.local/bin" >> ~/.bashrc
          echo "export LANG=en_US.UTF-8" >> ~/.bashrc
          echo "export LC_ALL=en_US.UTF-8" >> ~/.bashrc

      # Clone repositories (check if PR or manual trigger)
      - name: Clone repositories
        run: |
          cd /home/ubuntu/yocto/${{ inputs.yocto_version }}
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
              GH_URL="$GITHUB_SERVER_URL/${{ github.event.pull_request.head.repo.full_name }}"
              GH_REV="$GITHUB_HEAD_REF"
          else
              GH_URL="$GITHUB_SERVER_URL/brightsign/meta-browser"
              GH_REV="master"
          fi
          
          echo "Cloning from $GH_URL, branch/ref: $GH_REV"
          git clone $GH_URL
          git -C meta-browser checkout $GH_REV
          
          # Clone the test repo (use electron-master branch for electron builds)
          if [[ "${{ inputs.chromium_version }}" == *"ozone-x11"* ]]; then
            echo "Cloning meta-chromium-test electron-master branch for electron build"
            git clone -b electron-master https://github.com/brightsign/meta-chromium-test.git
          else
            echo "Cloning meta-chromium-test main branch for chromium build" 
            git clone -b main https://github.com/brightsign/meta-chromium-test.git
          fi

      # Run the build
      - name: Build Browser
        run: |
          # Set environment variables that the Docker container would have
          export LANG=en_US.UTF-8
          export LC_ALL=en_US.UTF-8
          export PATH=$PATH:$HOME/.local/bin
          
          # Debug environment
          echo "=== Environment Debug ==="
          echo "PATH: $PATH"
          echo "LANG: $LANG"
          echo "LC_ALL: $LC_ALL"
          echo "User: $(whoami)"
          echo "Home: $HOME"
          which kas || echo "kas not found in PATH"
          
          # The build script expects to run from /yocto/master
          cd /yocto/${{ inputs.yocto_version }}
          
          # Copy the repositories from our working directory
          cp -r /home/ubuntu/yocto/${{ inputs.yocto_version }}/meta-browser ./
          cp -r /home/ubuntu/yocto/${{ inputs.yocto_version }}/meta-chromium-test ./
          
          # Set environment variables for caching (EFS mounts only)
          export SSTATE_DIR=/mnt/shared-cache/sstate-cache
          export DL_DIR=/mnt/shared-cache/downloads
          
          # Determine build type based on chromium_version parameter
          if [[ "${{ inputs.chromium_version }}" == *"ozone-wayland"* ]]; then
            BUILD_TYPE="chromium"
            BROWSER_VERSION="ozone-wayland"
          elif [[ "${{ inputs.chromium_version }}" == *"ozone-x11"* ]]; then
            BUILD_TYPE="electron"
            BROWSER_VERSION="ozone-x11"
          elif [[ "${{ inputs.chromium_version }}" == *"x11"* ]]; then
            BUILD_TYPE="chromium"
            BROWSER_VERSION="x11"
          else
            BUILD_TYPE="chromium"
            BROWSER_VERSION="${{ inputs.chromium_version }}"
          fi
          
          echo "Building $BUILD_TYPE with version $BROWSER_VERSION"
          echo "Current directory: $(pwd)"
          echo "Directory contents: $(ls -la)"
          echo "Yocto directories:"
          ls -la /yocto/ 2>/dev/null || echo "No /yocto directory"
          
          # Verify the build script exists and is executable
          if [ -f "./meta-chromium-test/scripts/build.sh" ]; then
            echo "Build script found"
            ls -la ./meta-chromium-test/scripts/build.sh
            chmod +x ./meta-chromium-test/scripts/build.sh
            echo "=== Build script first 20 lines ==="
            head -20 ./meta-chromium-test/scripts/build.sh
          else
            echo "Build script not found!"
            find . -name "build.sh" 2>/dev/null || echo "No build.sh found anywhere"
            exit 1
          fi
          
          # Run the build script
          ./meta-chromium-test/scripts/build.sh ${{ inputs.yocto_version }} ${{ inputs.arch }} $BROWSER_VERSION ${{ inputs.libc_flavour }}

      # Upload build artifacts to S3 (if successful)
      - name: Upload artifacts
        if: success()
        run: |
          cd /yocto/${{ inputs.yocto_version }}
          
          # Find and upload build artifacts
          DEPLOY_DIR=$(find build -name "deploy" -type d | head -1)
          if [ -n "$DEPLOY_DIR" ] && [ -d "$DEPLOY_DIR" ]; then
            echo "Uploading artifacts from $DEPLOY_DIR"
            # Determine build type for artifact path
            if [[ "${{ inputs.chromium_version }}" == *"ozone-x11"* ]]; then
              BUILD_TYPE="electron"
            else
              BUILD_TYPE="chromium"
            fi
            aws s3 sync $DEPLOY_DIR/ s3://${ARTIFACT_BUCKET_NAME}/meta-browser/${{ inputs.yocto_version }}/${{ inputs.arch }}/${BUILD_TYPE}/${{ inputs.chromium_version }}/${{ github.run_id }}/ --quiet
          else
            echo "No deploy directory found"
            echo "Available directories:"
            find . -name "deploy" -type d 2>/dev/null || echo "No deploy directories found"
          fi

      # Unmount EFS file systems
      - name: Cleanup EFS mounts
        if: always()
        run: |
          sudo umount /mnt/shared-cache || true
          sudo umount /mnt/git-mirror || true
